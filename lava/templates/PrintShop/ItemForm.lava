{% comment %}
    This is a generic template used in each print shop item workflow. It displays
    the form header and calculates the price client side.

    Inputs:
    - error                         : the error message to be displayed
    - fieldsJson                    : JSON array that contains the fields. Will be passed as an object to the calculate price function
    - calculatePriceJavascript      : a javascript function that will calculate the price

    EXAMPLES

    [
        {
            "name": "material",
            "selector": "select[name*=attribute_field_27303]",
            "event": "change"
        },
        {
            "name": "quantity",
            "selector": "input[name*=attribute_field_27294]",
            "event": "input"
        },
    ]

    function calculatePrice({material, quantity}) {
        return quantity * 0.06;
    }
{% endcomment %}

{% assign fields = fieldsJson | FromJSON %}

<script>
  /*
   * this script calculates the price on the client side. note that the real
   * price is calculated in a workflow action.
   */

  $(document).ready(function() {
    addMainObserver();
    addAllListeners();
    handleInput(); // fill in price on page load

    // add validation errors to validation container
    if (`{{ error }}`.length > 0)
      addValidationErrors();
  });

  /*
   * inserts the calculate price function passed into this template
   */
  {{ calculatePriceJavascript }}

  // adds the main observer that will re-add the listeners if the form changes
  function addMainObserver() {
    const observer = new MutationObserver(function(mutations) {
      addAllListeners();
      handleInput(); // fill in price
    });

    observer.observe(document.querySelector(".workflow-entry div[id*=upnlContent]"), { subtree: false, childList: true });
  }

  /*
   * parses the fields JSON string and adds apprpriate event listeners to each selector
   */
  function addAllListeners() {
    {% for field in fields %}
        addListenerToSelector(`{{ field.selector }}`, `{{ field.event }}`);
    {% endfor %}
  }

  /*
   * creates validation error panel and adds custom validation messages to it
   */
  function addValidationErrors() {
    let container = document.querySelector(".workflow-entry-panel .alert.alert-validation");
    let errorMessage = `{{ error }}`;

    // create container if it doesn't exist
    if (!container) {
      container = document.createElement("div");
      container.className = "alert alert-validation";
      container.innerHTML = `
        Please correct the following:
        <ul>
        </ul>
      `;

      document.querySelector(".workflow-entry-panel").prepend(container);
    }

    // add the message container if it doesn't exist
    let messageContainer = container.querySelector("ul");

    if (!messageContainer) {
      container.innerHTML = `
        Please correct the following:
        <ul>
        </ul>
      `;

      messageContainer = container.querySelector("ul");
    }

    container.style.display = null;

    messageContainer.innerHTML = messageContainer.innerHTML + errorMessage;
  }

  /*
   * use this function to add listeners to inputs and select boxes
   */
  function addListenerToSelector(selector, eventName, multiple = false) {
    if (multiple)
      document.querySelectorAll(selector).forEach((elem) => {
        elem.addEventListener(eventName, handleInput);
      });

    const elem = document.querySelector(selector);

    console.log(elem);

    if (elem)
      elem.addEventListener(eventName, handleInput);
  }

  /*
   * use this function to add listeners to inputs and select boxes
   */
  function handleInput() {
    let data = {};

    // loops over all filds and stores their values to pass to calculate price
    {% for field in fields %}
        data["{{ field.name }}"] = document.querySelector("{{ field.selector }}").value;
    {% endfor %}

    const priceTarget = document.getElementById("price-target");

    price = calculatePrice(data);

    // Create our number formatter.
    var formatter = new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    });

    priceTarget.innerText = formatter.format(price);
  }
</script>
